{
    "sourceFile": "Javascript/Math/median.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1732103560915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732103742667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,27 @@\n //<--- Median --->\r\n \r\n-function teoremaDePitagoras(c1, c2) {\r\n+function median(numbers) {\r\n+    // Ordenar os números em ordem crescente\r\n+    const sortedNumbers = numbers.slice().sort((a, b) => a - b);\r\n \r\n-    let h = Number;\r\n+    // Obter o tamanho do array\r\n+    const n = sortedNumbers.length;\r\n \r\n-    // Calculate c1² + c2²\r\n-    h = c1 ** 2 + c2 ** 2;\r\n-    let hypotenuse = Math.sqrt(h);\r\n-    return hypotenuse;\r\n\\ No newline at end of file\n+    // Verificar se o número de elementos é par ou ímpar\r\n+    if (n % 2 === 1) {\r\n+        // Ímpar: Retorna o valor central\r\n+        return sortedNumbers[Math.floor(n / 2)];\r\n+    } else {\r\n+        // Par: Calcula a média dos dois valores centrais\r\n+        const mid1 = sortedNumbers[n / 2 - 1];\r\n+        const mid2 = sortedNumbers[n / 2];\r\n+        return (mid1 + mid2) / 2;\r\n+    }\r\n }\r\n \r\n-let result = teoremaDePitagoras(3, 4);\r\n-console.log(result);\r\n-//Output: 5;\n+const numbers = [3, 1, 4, 1, 5, 9, 2];\r\n+console.log(\"A mediana é:\", median(numbers));\r\n+//Output: 3\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732103806818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,14 @@\n //<--- Median --->\r\n \r\n function median(numbers) {\r\n-    // Ordenar os números em ordem crescente\r\n+    // Sort the numbers in ascending order\r\n     const sortedNumbers = numbers.slice().sort((a, b) => a - b);\r\n-\r\n-    // Obter o tamanho do array\r\n     const n = sortedNumbers.length;\r\n \r\n-    // Verificar se o número de elementos é par ou ímpar\r\n+    // Check if the number of elements is odd or even\r\n     if (n % 2 === 1) {\r\n-        // Ímpar: Retorna o valor central\r\n+        // Odd: Return the middle value\r\n         return sortedNumbers[Math.floor(n / 2)];\r\n     } else {\r\n         // Par: Calcula a média dos dois valores centrais\r\n         const mid1 = sortedNumbers[n / 2 - 1];\r\n"
                },
                {
                    "date": 1732103813269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     if (n % 2 === 1) {\r\n         // Odd: Return the middle value\r\n         return sortedNumbers[Math.floor(n / 2)];\r\n     } else {\r\n-        // Par: Calcula a média dos dois valores centrais\r\n+        // Even: Calculate the average of the two middle values\r\n         const mid1 = sortedNumbers[n / 2 - 1];\r\n         const mid2 = sortedNumbers[n / 2];\r\n         return (mid1 + mid2) / 2;\r\n     }\r\n"
                },
                {
                    "date": 1732104105198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n //<--- Median --->\r\n \r\n+// <-----------Using a LOOP---------------->\r\n function median(numbers) {\r\n     // Sort the numbers in ascending order\r\n     const sortedNumbers = numbers.slice().sort((a, b) => a - b);\r\n     const n = sortedNumbers.length;\r\n@@ -20,6 +21,21 @@\n const numbers = [3, 1, 4, 1, 5, 9, 2];\r\n console.log(\"A mediana é:\", median(numbers));\r\n //Output: 3\r\n \r\n+// <-----------Using Javascript Methods---------------->\r\n \r\n+function median(numbers) {\r\n+    const sorted = numbers.sort((a, b) => a - b);\r\n+    const mid = Math.floor(sorted.length / 2);\r\n+    return sorted.length % 2 === 0\r\n+        ? (sorted[mid - 1] + sorted[mid]) / 2\r\n+        : sorted[mid];\r\n+}\r\n \r\n+// Exemplo de uso\r\n+console.log(median([3, 1, 4, 1, 5, 9, 2])); // Saída: 3\r\n+\r\n+// 1 - Um palíndromo é uma palavra que é lida da mesma forma de trás para frente. Escreva uma função \"Palindromo\" que verifica se uma palavra é um palíndromo. \r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1732104110603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n //Output: 3\r\n \r\n // <-----------Using Javascript Methods---------------->\r\n \r\n-function median(numbers) {\r\n+function medians(numbers) {\r\n     const sorted = numbers.sort((a, b) => a - b);\r\n     const mid = Math.floor(sorted.length / 2);\r\n     return sorted.length % 2 === 0\r\n         ? (sorted[mid - 1] + sorted[mid]) / 2\r\n"
                },
                {
                    "date": 1732104118144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n         ? (sorted[mid - 1] + sorted[mid]) / 2\r\n         : sorted[mid];\r\n }\r\n \r\n-// Exemplo de uso\r\n-console.log(median([3, 1, 4, 1, 5, 9, 2])); // Saída: 3\r\n+console.log(medians([3, 1, 4, 1, 5, 9, 2]));\r\n+// Saída: 3\r\n \r\n // 1 - Um palíndromo é uma palavra que é lida da mesma forma de trás para frente. Escreva uma função \"Palindromo\" que verifica se uma palavra é um palíndromo. \r\n \r\n \r\n"
                },
                {
                    "date": 1732104127022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         : sorted[mid];\r\n }\r\n \r\n console.log(medians([3, 1, 4, 1, 5, 9, 2]));\r\n-// Saída: 3\r\n+//Output: 3\r\n \r\n // 1 - Um palíndromo é uma palavra que é lida da mesma forma de trás para frente. Escreva uma função \"Palindromo\" que verifica se uma palavra é um palíndromo. \r\n \r\n \r\n"
                },
                {
                    "date": 1732104140672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n }\r\n \r\n const numbers = [3, 1, 4, 1, 5, 9, 2];\r\n console.log(\"A mediana é:\", median(numbers));\r\n-//Output: 3\r\n+//Output: A mediana é: 3\r\n \r\n // <-----------Using Javascript Methods---------------->\r\n \r\n function medians(numbers) {\r\n"
                },
                {
                    "date": 1732104146475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,5 @@\n \r\n console.log(medians([3, 1, 4, 1, 5, 9, 2]));\r\n //Output: 3\r\n \r\n-// 1 - Um palíndromo é uma palavra que é lida da mesma forma de trás para frente. Escreva uma função \"Palindromo\" que verifica se uma palavra é um palíndromo. \r\n \r\n-\r\n-\r\n"
                },
                {
                    "date": 1732104299770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,21 @@\n // <-----------Using Javascript Methods---------------->\r\n \r\n function medians(numbers) {\r\n     const sorted = numbers.sort((a, b) => a - b);\r\n+    \r\n+    // Calculate the index of the middle element\r\n     const mid = Math.floor(sorted.length / 2);\r\n+\r\n+    // If the number of elements is even, return the average of the two central values\r\n     return sorted.length % 2 === 0\r\n         ? (sorted[mid - 1] + sorted[mid]) / 2\r\n         : sorted[mid];\r\n }\r\n \r\n console.log(medians([3, 1, 4, 1, 5, 9, 2]));\r\n //Output: 3\r\n \r\n+// 1 - Um palíndromo é uma palavra que é lida da mesma forma de trás para frente. Escreva uma função \"Palindromo\" que verifica se uma palavra é um palíndromo. \r\n \r\n+\r\n+\r\n"
                }
            ],
            "date": 1732103560915,
            "name": "Commit-0",
            "content": "//<--- Median --->\r\n\r\nfunction teoremaDePitagoras(c1, c2) {\r\n\r\n    let h = Number;\r\n\r\n    // Calculate c1² + c2²\r\n    h = c1 ** 2 + c2 ** 2;\r\n    let hypotenuse = Math.sqrt(h);\r\n    return hypotenuse;\r\n}\r\n\r\nlet result = teoremaDePitagoras(3, 4);\r\nconsole.log(result);\r\n//Output: 5;"
        }
    ]
}